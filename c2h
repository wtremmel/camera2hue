#!/usr/bin/perl
#

$debug = 0;
$background = 1;


if (!$debug && $background) {
  use Proc::Daemon;
  $pid = Proc::Daemon::Init;
  if ($pid) {
    open(F,">/var/run/c2h.pid");
    print F "$pid\n";
    close F;
    exit 0;
  }
}

use Graphics::Magick;
use GD;
use Graphics::ColorObject;
use Net::Ping;
use Device::Hue;
use Data::Dumper;


my $hue = Device::Hue-> new({
	'bridge' => 'http://philips-hue.garf.de',
	'key' => 'S6AsTyjBqvqSQBoo7SYlDzSvSsUJ-61XLhb4FgLO',
	'debug' => $debug
	});

$infile = "/tmp/latest.jpg";
$tmpfile = "/tmp/9x9.jpg";
$tmpfile2 = "/tmp/color.jpg";
$tv = "192.168.179.134";
$right = 6;
$left = 5;
$threshold=20;

$tvping = Net::Ping->new("icmp",2,0);

# wait until TV is switched on
&waitfortv;

$noping = 0;
while (1) {
 
  # Take picture of TV screen
  # system("raspistill -o $infile -drc high -mm matrix $EXPO -w 320 -h 240 -t 1");
  system("raspistill -o $infile -drc high -ifx saturation -mm matrix $EXPO -w 320 -h 240 -t 1");

  # Read picture into memory
  my $im = Graphics::Magick->new;
  $err = $im->Read($infile);
  warn $err if $err;

  # If necessary, crop picture
  # $im->Crop.....


  # Generate 9x9 pixeliced version of picture
  # $im->Modulate(saturation => 800.0,brightness => 200.0, hue => 100.0);
  $im->Write($tmpfile2);
  $im->Resize(width => 20, height => 20);
  # Write it to RAMdisk
  $im->Write($tmpfile);


  # and read it in again
  my $gd = GD::Image->newFromJpeg($tmpfile);

  # get rgb colorof two pixels on left and right side

  my @l= $gd->rgb($gd->getPixel(2,10));
  my @r= $gd->rgb($gd->getPixel(18,10));


  # sort the color values (low -> high)
  my @sleft = sort {$a <=> $b} @l;
  my @sright= sort {$a <=> $b} @r;

  # get the lowest and highest value
  my $lmin = $sleft[0];
  my $rmin = $sright[0];
  my $lmax = $sleft[2];
  my $rmax = $sright[2];
  
 # get the differences between the color values
  my @ldist = (abs($sleft[0]-$sleft[1]),
               abs($sleft[0]-$sleft[2]),
               abs($sleft[2]-$sleft[1]));
  my @rdist = (abs($sright[0]-$sright[1]),
               abs($sright[0]-$sright[2]),
               abs($sright[2]-$sright[1]));

  # sort hihg -> low
  my @srdist = sort {$a <=> $b} @rdist;
  my @sldist = sort {$a <=> $b} @ldist;

  # highest difference pretty big map all values from 0..255
  # remove color with lowest value - two color mix
  if ($srdist[2] > $threshold) {
    $or = mymap($r[0],$sright[0],$sright[2],0,255);
    $og = mymap($r[1],$sright[0],$sright[2],0,255);
    $ob = mymap($r[2],$sright[0],$sright[2],0,255);
    $coltemp = 0;
    &dolamprgb($right,$or,$og,$ob) if !$debug;
  } else {
    $or = $r[0];
    $og = $r[1];
    $ob = $r[2];
    $coltemp = colTemp($or,$og,$ob);
    &dolamprgb($right,$or,$og,$ob) if !$debug;
  }
  print "right $or $og $ob $coltemp\n" if $debug;

  if ($sldist[2] > $threshold) {
    $or = mymap($l[0],$sleft[0],$sleft[2],0,255);
    $og = mymap($l[1],$sleft[0],$sleft[2],0,255);
    $ob = mymap($l[2],$sleft[0],$sleft[2],0,255);
    $coltemp = 0;
    &dolamprgb($left,$or,$og,$ob) if !$debug;
  } else {
    $or = $l[0];
    $og = $l[1];
    $ob = $l[2];
    $coltemp = colTemp($or,$og,$ob);
    &dolamprgb($left,$or,$og,$ob) if !$debug;
  }
  print "left $or $og $ob $coltemp\n" if $debug;

  exit if $debug;

  #
  # check reacability
  #
  if (!$tvping->ping($tv,1)) {
    $noping++;
    if ($noping > 1) {
      # switch light to on
      $hue->light($right)->bri(254);
      $hue->light($right)->ct(367);
      $hue->light($left)->bri(254);
      $hue->light($left)->ct(367);
      &waitfortv;
      $noping = 0;
    }
  }
}

sub waitfortv {
  return 1 if $debug;
  while (!$tvping->ping($tv,5)) {
    sleep(1);
  }
}

sub dolamprgb {
  my ($lamp, $r, $g, $b) = @_;

  if ($hue->light($lamp)->is_on()) {
    $hue->light($lamp)->rgb($r,$g,$b);
  }
}

sub mymap {
  my ($x, $in_min, $in_max, $out_min, $out_max) = @_;
  if ($x == $in_max) {
     return $out_max;
  } elsif ($out_min < $out_max) {
    return int(($x - $in_min) * ($out_max - $out_min+1) / ($in_max - $in_min) + $out_min);
  } else {
    return int(($x - $in_min) * ($out_max - $out_min-1) / ($in_max - $in_min) + $out_min);
  }
}

sub colTemp {
  my ($r,$g,$b) = @_;

  my $x = (-0.14282 * $r) + (1.54924 * $g) + (-0.95641 * $b);
  my $y = (-0.32466 * $r) + (1.57837 * $g) + (-0.73191 * $b);
  my $z = (-0.68202 * $r) + (0.77073 * $g) + (0.56332 * $b);

  my $xc = $x / ($x+$y+$z);
  my $yc = $y / ($x+$y+$z);

  my $n = ($xc - 0.3320) / (0.1858 - $yc);

  my $cct = (449.0 * n^3) + (3525.0 * n^2) + (6823.3 * n) + 5520.33;

  return int(1000000 / $cct);
}
